// Code generated by templ@(devel) DO NOT EDIT.

package template

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "strconv"

func Post(body templ.Component, title string, hook string, tag string, date string, readingTime int) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<head><link rel=\"stylesheet\" href=\"/static/style.css\"><link rel=\"stylesheet\" href=\"/static/atom-one-dark-reasonable.min.css\"><script src=\"/static/highlight.min.js\">")
		if err != nil {
			return err
		}
		var_2 := ``
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script></head><body class=\"ml-[30rem] mr-[30rem] mt-24 flex flex-col justify-center bg-zinc-900 font-serif\"><script>")
		if err != nil {
			return err
		}
		var_3 := `
        hljs.highlightAll();
      `
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script><div class=\"ml-32 mr-32 text-justify\"><h1 id=\"this-is\" class=\"mb-6 text-6xl font-semibold text-neutral-200\">")
		if err != nil {
			return err
		}
		var var_4 string = title
		_, err = templBuffer.WriteString(templ.EscapeString(var_4))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><p class=\"text-justify text-lg text-neutral-400\">")
		if err != nil {
			return err
		}
		var var_5 string = tag
		_, err = templBuffer.WriteString(templ.EscapeString(var_5))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_6 := `&#x2022; `
		_, err = templBuffer.WriteString(var_6)
		if err != nil {
			return err
		}
		var var_7 string = date
		_, err = templBuffer.WriteString(templ.EscapeString(var_7))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_8 := `&#x2022; `
		_, err = templBuffer.WriteString(var_8)
		if err != nil {
			return err
		}
		var var_9 string = strconv.Itoa(readingTime) + " Minutes"
		_, err = templBuffer.WriteString(templ.EscapeString(var_9))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p><br><em class=\"text-justify text-2xl text-neutral-400\">")
		if err != nil {
			return err
		}
		var var_10 string = hook
		_, err = templBuffer.WriteString(templ.EscapeString(var_10))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</em></div><hr class=\"mb-12 opacity-50\"><div class=\"ml-32 mr-32\">")
		if err != nil {
			return err
		}
		err = body.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></body>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
